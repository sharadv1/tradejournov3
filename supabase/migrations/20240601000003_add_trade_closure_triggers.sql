-- Create function to update trade status and remaining position size when a closure is added\nCREATE OR REPLACE FUNCTION update_trade_after_closure()\nRETURNS TRIGGER AS 33392\nDECLARE\n  v_total_closed DECIMAL;\n  v_original_size DECIMAL;\n  v_weighted_sum DECIMAL := 0;\n  v_avg_exit_price DECIMAL;\nBEGIN\n  -- Get the original position size\n  SELECT position_size INTO v_original_size FROM trades WHERE id = NEW.trade_id;\n  \n  -- Calculate total closed position size including the new closure\n  SELECT COALESCE(SUM(closed_position_size), 0) INTO v_total_closed \n  FROM trade_closures \n  WHERE trade_id = NEW.trade_id;\n  \n  -- Calculate weighted average exit price\n  SELECT COALESCE(SUM(close_price * closed_position_size), 0) INTO v_weighted_sum \n  FROM trade_closures \n  WHERE trade_id = NEW.trade_id;\n  \n  IF v_total_closed > 0 THEN\n    v_avg_exit_price := v_weighted_sum / v_total_closed;\n  ELSE\n    v_avg_exit_price := NULL;\n  END IF;\n  \n  -- Update the trade record\n  UPDATE trades SET\n    original_position_size = v_original_size,\n    remaining_position_size = v_original_size - v_total_closed,\n    average_exit_price = v_avg_exit_price,\n    is_fully_closed = (v_original_size <= v_total_closed),\n    exit_price = v_avg_exit_price,\n    exit_date = CASE WHEN v_original_size <= v_total_closed THEN NEW.close_date ELSE exit_date END,\n    exit_time = CASE WHEN v_original_size <= v_total_closed THEN NEW.close_time ELSE exit_time END,\n    status = CASE WHEN v_original_size <= v_total_closed THEN 'closed' ELSE 'partial' END,\n    updated_at = NOW()\n  WHERE id = NEW.trade_id;\n  \n  RETURN NEW;\nEND;\n33392 LANGUAGE plpgsql;\n\n-- Create trigger to update trade when a closure is added\nCREATE TRIGGER update_trade_after_closure_trigger\nAFTER INSERT OR UPDATE ON trade_closures\nFOR EACH ROW\nEXECUTE FUNCTION update_trade_after_closure();\n\n-- Create trigger to update trade when a closure is deleted\nCREATE OR REPLACE FUNCTION update_trade_after_closure_delete()\nRETURNS TRIGGER AS 33392\nDECLARE\n  v_total_closed DECIMAL;\n  v_original_size DECIMAL;\n  v_weighted_sum DECIMAL := 0;\n  v_avg_exit_price DECIMAL;\nBEGIN\n  -- Get the original position size\n  SELECT position_size INTO v_original_size FROM trades WHERE id = OLD.trade_id;\n  \n  -- Calculate total closed position size after deletion\n  SELECT COALESCE(SUM(closed_position_size), 0) INTO v_total_closed \n  FROM trade_closures \n  WHERE trade_id = OLD.trade_id;\n  \n  -- Calculate weighted average exit price\n  SELECT COALESCE(SUM(close_price * closed_position_size), 0) INTO v_weighted_sum \n  FROM trade_closures \n  WHERE trade_id = OLD.trade_id;\n  \n  IF v_total_closed > 0 THEN\n    v_avg_exit_price := v_weighted_sum / v_total_closed;\n  ELSE\n    v_avg_exit_price := NULL;\n  END IF;\n  \n  -- Update the trade record\n  UPDATE trades SET\n    remaining_position_size = v_original_size - v_total_closed,\n    average_exit_price = v_avg_exit_price,\n    is_fully_closed = (v_original_size <= v_total_closed),\n    exit_price = v_avg_exit_price,\n    exit_date = CASE WHEN v_total_closed = 0 THEN NULL ELSE exit_date END,\n    exit_time = CASE WHEN v_total_closed = 0 THEN NULL ELSE exit_time END,\n    status = CASE \n      WHEN v_total_closed = 0 THEN 'open'\n      WHEN v_original_size <= v_total_closed THEN 'closed'\n      ELSE 'partial'\n    END,\n    updated_at = NOW()\n  WHERE id = OLD.trade_id;\n  \n  RETURN OLD;\nEND;\n33392 LANGUAGE plpgsql;\n\n-- Create trigger to update trade when a closure is deleted\nCREATE TRIGGER update_trade_after_closure_delete_trigger\nAFTER DELETE ON trade_closures\nFOR EACH ROW\nEXECUTE FUNCTION update_trade_after_closure_delete();
